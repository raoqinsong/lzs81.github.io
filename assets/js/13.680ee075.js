(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{469:function(s,a,n){"use strict";n.r(a);var e=n(2),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"lambda-表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lambda-表达式"}},[s._v("#")]),s._v(" Lambda 表达式")]),s._v(" "),n("p",[s._v("− Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。")]),s._v(" "),n("h3",{attrs:{id:"语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("(parameters) -> expression\n或\n(parameters) ->{ statements; }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("以下是lambda表达式的重要特征:")]),s._v(" "),n("ul",[n("li",[s._v("可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。")]),s._v(" "),n("li",[s._v("可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。")]),s._v(" "),n("li",[s._v("可选的大括号：如果主体包含了一个语句，就不需要使用大括号。")]),s._v(" "),n("li",[s._v("可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。")])]),s._v(" "),n("h3",{attrs:{id:"lambda表达式实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式实例"}},[s._v("#")]),s._v(" Lambda表达式实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 1. 不需要参数,返回值为 5  \n() -> 5  \n  \n// 2. 接收一个参数(数字类型),返回其2倍的值  \nx -> 2 * x  \n  \n// 3. 接受2个参数(数字),并返回他们的差值  \n(x, y) -> x – y  \n  \n// 4. 接收2个int型整数,返回他们的和  \n(int x, int y) -> x + y  \n  \n// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  \n(String s) -> System.out.print(s)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("strong",[s._v("在 JavaTester.java 文件输入以下代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class Java8Tester {\n   public static void main(String args[]){\n      Java8Tester tester = new Java8Tester();\n        \n      // 类型声明\n      MathOperation addition = (int a, int b) -> a + b;\n        \n      // 不用类型声明\n      MathOperation subtraction = (a, b) -> a - b;\n        \n      // 大括号中的返回语句\n      MathOperation multiplication = (int a, int b) -> { return a * b; };\n        \n      // 没有大括号及返回语句\n      MathOperation division = (int a, int b) -> a / b;\n        \n      System.out.println("10 + 5 = " + tester.operate(10, 5, addition));\n      System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));\n      System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));\n      System.out.println("10 / 5 = " + tester.operate(10, 5, division));\n        \n      // 不用括号\n      GreetingService greetService1 = message ->\n      System.out.println("Hello " + message);\n        \n      // 用括号\n      GreetingService greetService2 = (message) ->\n      System.out.println("Hello " + message);\n        \n      greetService1.sayMessage("Runoob");\n      greetService2.sayMessage("Google");\n   }\n    \n   interface MathOperation {\n      int operation(int a, int b);\n   }\n    \n   interface GreetingService {\n      void sayMessage(String message);\n   }\n    \n   private int operate(int a, int b, MathOperation mathOperation){\n      return mathOperation.operation(a, b);\n   }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[s._v("执行以上脚本，输出结果为：")]),s._v(" "),n("blockquote",[n("p",[s._v("$ javac Java8Tester.java\n$ java Java8Tester\n10 + 5 = 15\n10 - 5 = 5\n10 x 5 = 50\n10 / 5 = 2\nHello Runoob\nHello Google")])]),s._v(" "),n("p",[n("strong",[s._v("使用 Lambda 表达式需要注意以下两点：")])]),s._v(" "),n("ul",[n("li",[s._v("Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。")]),s._v(" "),n("li",[s._v("Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。")])]),s._v(" "),n("h3",{attrs:{id:"变量作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[s._v("#")]),s._v(" 变量作用域")]),s._v(" "),n("p",[s._v("lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。")]),s._v(" "),n("p",[s._v("在 Java8Tester.java 文件输入以下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('public class Java8Tester {\n \n   final static String salutation = "Hello! ";\n   \n   public static void main(String args[]){\n      GreetingService greetService1 = message -> \n      System.out.println(salutation + message);\n      greetService1.sayMessage("Runoob");\n   }\n    \n   interface GreetingService {\n      void sayMessage(String message);\n   }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("执行以上脚本，输出结果为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ javac Java8Tester.java \n$ java Java8Tester\nHello! Runoob\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("我们也可以直接在 lambda 表达式中访问外层的局部变量：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("public class Java8Tester {\n    public static void main(String args[]) {\n        final int num = 1;\n        Converter<Integer, String> s = (param) -> System.out.println(String.valueOf(param + num));\n        s.convert(2);  // 输出结果为 3\n    }\n \n    public interface Converter<T1, T2> {\n        void convert(int i);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int num = 1;  \nConverter<Integer, String> s = (param) -> System.out.println(String.valueOf(param + num));\ns.convert(2);\nnum = 5;  \n//报错信息：Local variable num defined in an enclosing scope must be final or effectively \n final\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String first = "";  \nComparator<String> comparator = (first, second) -> Integer.compare(first.length(), second.length());  //编译会出错 \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);